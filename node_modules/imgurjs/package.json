{
  "name": "imgurjs",
  "version": "1.1.0",
  "description": "An Imgur API wrapper.",
  "homepage": "https://github.com/xbenjii/imgurjs",
  "repository": {
    "type": "git",
    "url": "git@github.com:xbenjii/imgurjs.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "imgur",
    "imgurjs",
    "api"
  ],
  "author": {
    "name": "xbenjii",
    "url": "Benjamin Fortune"
  },
  "license": "ISC",
  "dependencies": {
    "request-promise": "^0.4.0"
  },
  "readme": "# imgurjs\r\nA wrapper for the Imgur API written in JavaScript. All methods take advantage of Promises.\r\n\r\n## Installation\r\n\r\n    npm install --save imgurjs\r\n\r\n## Instantiation\r\n    var Imgur = require('imgurjs');\r\n    var imgur = new Imgur({\r\n        clientId: 'myClientId',\r\n        clientSecret: 'myClientSecret'\r\n    });\r\n\r\n##Using it\r\n##### Since this library takes advantage of promises, all methods should use the promise pattern. Options should be passed as an object to the method.\r\n\r\n    var options = {\r\n        username: 'me'\r\n    };\r\n    imgur.endpoint.method(options).then(function(data) {\r\n        console.log(data);\r\n    }).catch(function(error) {\r\n        console.log(error);\r\n    });\r\n\r\n## Authentication\r\n##### Example uses Express\r\n    router.get('/login', function(req, res, next) {\r\n        res.redirect(imgur.oauth.getOauthUrl());\r\n    });\r\n\r\n    router.get('/loginCallback', function(req, res, next) {\r\n        imgur.oauth.authorizeCallback(req.query.code).then(function(user) {\r\n            req.session.user = user;\r\n            res.redirect('/');\r\n        });\r\n    });\r\n\r\n    router.get('./refreshsession', function(req, res, next) {\r\n        imgur.oauth.refreshToken(req.session.user.refresh_token).then(function(user) {\r\n            req.session.user = user;\r\n            res.redirect('/');\r\n        });\r\n    });\r\n\r\n## Uploading image example\r\n\r\n    fs.readFile('./myImage.png', function(err, data) {\r\n        imgur.image.upload({\r\n            file: data\r\n        }).then(function(response) {\r\n            console.log(response);\r\n        }).catch(function(error) {\r\n            console.log(error);\r\n        });\r\n    });\r\n\r\n##### Also accepts a stream\r\n\r\n    imgur.image.upload({\r\n        file: fs.createReadStream('./myImage.png')\r\n    }).then(function(response) {\r\n        console.log(response);\r\n    }).catch(function(error) {\r\n        console.log(error);\r\n    });\r\n\r\n##### And a URL\r\n\r\n    imgur.image.upload({\r\n        file: 'http://mysite.com/myImage.png'\r\n    }).then(function(response) {\r\n        console.log(response);\r\n    }).catch(function(error) {\r\n        console.log(error);\r\n    });\r\n\r\nFull documentation is available at [https://xbenjii.github.io/imgurjs](https://xbenjii.github.io/imgurjs)",
  "readmeFilename": "README.MD",
  "bugs": {
    "url": "https://github.com/xbenjii/imgurjs/issues"
  },
  "_id": "imgurjs@1.1.0",
  "_from": "imgurjs@"
}
